<data disableStreaming="true" name="FaultDBService">
   <config id="default">
      <property name="org.wso2.ws.dataservice.driver">org.h2.Driver</property>
      <property name="org.wso2.ws.dataservice.protocol">jdbc:h2:mem:ds-test-db</property>
      <property name="org.wso2.ws.dataservice.user"/>
      <property name="org.wso2.ws.dataservice.password"/>
      <property name="org.wso2.ws.dataservice.minpoolsize">2</property>
      <property name="org.wso2.ws.dataservice.maxpoolsize">100</property>
      <property name="org.wso2.ws.dataservice.validation_query">SELECT 1</property>
   </config>
   <!-- Query and Operation for a plain SELECT with given fields test  -->
      <query id="select_query_given_fields" useConfig="default">
         <sql>SELECT customerNumber, customerName, contactLastName, phone, city FROM Wrong</sql>
         <result element="Customers" rowName="Customer">
            <element column="customerNumber" name="customerNumber" xsdType="xs:integer"/>
            <element column="customerName" name="customerName" xsdType="xs:string"/>
            <element column="contactLastName" name="contactLastName" xsdType="xs:string"/>
            <element column="phone" name="phone" xsdType="xs:string"/>
            <element column="city" name="city" xsdType="xs:string"/>
         </result>
      </query>
      <operation name="select_op_given_fields">
         <call-query href="select_query_given_fields">      </call-query>
      </operation>
      <resource method="GET" path="customers1">
         <call-query href="select_query_given_fields"/>
      </resource>
      <!-- Query and Operation for a plain SELECT with all fields test  -->
         <query id="select_query_all_fields" useConfig="default">
            <sql>SELECT * FROM Wrong</sql>
            <result element="Products" rowName="Product">
               <element column="productCode" name="productCode" xsdType="xs:string"/>
               <element column="productName" name="productName" xsdType="xs:string"/>
               <element column="quantityInStock" name="quantityInStock" xsdType="xs:integer"/>
               <element column="buyPrice" name="buyPrice" xsdType="xs:double"/>
            </result>
         </query>
         <operation name="select_op_all_fields">
            <call-query href="select_query_all_fields">      </call-query>
         </operation>
         <resource method="POST" path="customers2">
            <call-query href="select_query_given_fields"/>
         </resource>
         <!-- Query and Operation for a SELECT COUNT -->
            <query id="select_query_count" useConfig="default">
               <sql>SELECT COUNT(*) as orderDetailsCount FROM OrderDetails</sql>
               <result element="Orders" rowName="OrderDetails">
                  <element column="orderDetailsCount" name="orderDetailsCount" xsdType="xs:integer"/>
               </result>
            </query>
            <operation name="select_op_count">
               <call-query href="select_query_count">      </call-query>
            </operation>
            <!-- Query and Operation for a SELECT with attributes test  -->
               <query id="select_attributes_query" useConfig="default">
                  <sql>SELECT customerNumber, checkNumber, paymentDate, amount FROM Payments</sql>
                  <result element="Payments" rowName="Payment">
                     <attribute column="customerNumber" name="customerNumber" xsdType="xs:integer"/>
                     <attribute column="paymentDate" name="paymentDate" xsdType="xs:date"/>
                     <attribute column="amount" name="amount" xsdType="xs:double"/>
                     <element column="checkNumber" name="checkNumber" xsdType="xs:string"/>
                  </result>
               </query>
               <operation name="select_attributes_op">
                  <call-query href="select_attributes_query">      </call-query>
               </operation>
               <query id="basic_merge_query1" useConfig="default">
                  <sql>SELECT customerNumber, customerName, contactLastName, phone, city FROM Customers LIMIT 2</sql>
                  <result element="Customers" rowName="Customer">
                     <element column="customerNumber" name="customerNumber" xsdType="xs:integer"/>
                     <element column="customerName" name="customerName" xsdType="xs:string"/>
                     <element column="contactLastName" name="contactLastName" xsdType="xs:string"/>
                     <element column="phone" name="phone" xsdType="xs:string"/>
                     <element column="city" name="city" xsdType="xs:string"/>
                  </result>
               </query>
               <query id="basic_merge_query2" useConfig="default">
                  <sql>SELECT customerNumber, customerName, contactLastName, phone, city FROM Customers LIMIT 3 OFFSET 2</sql>
                  <result element="Customers" rowName="Customer">
                     <element column="customerNumber" name="customerNumber" xsdType="xs:integer"/>
                     <element column="customerName" name="customerName" xsdType="xs:string"/>
                     <element column="contactLastName" name="contactLastName" xsdType="xs:string"/>
                     <element column="phone" name="phone" xsdType="xs:string"/>
                     <element column="city" name="city" xsdType="xs:string"/>
                  </result>
               </query>
               <!-- Array types -->
                  <query id="testArrayTypes" useConfig="default">
                     <sql>select customerNumber,customerName,contactLastName,phone,city from Customers where country = ? and state IN (?) and creditLimit &gt; ? and city IN (?) and contactFirstName = ?</sql>
                     <param name="country" ordinal="1" paramType="SCALAR" sqlType="STRING"/>
                     <param name="state" ordinal="2" paramType="ARRAY" sqlType="STRING"/>
                     <param name="creditLimit" ordinal="3" paramType="SCALAR" sqlType="INTEGER"/>
                     <param name="city" ordinal="4" paramType="ARRAY" sqlType="STRING"/>
                     <param name="contactFirstName" ordinal="5" paramType="SCALAR" sqlType="STRING"/>
                     <result element="Customers" rowName="Customer" useColumnNumbers="true">
                        <element column="1" name="customerNumber" xsdType="xs:integer"/>
                        <element column="2" name="customerName" xsdType="xs:string"/>
                        <element column="3" name="contactLastName" xsdType="xs:string"/>
                        <element column="4" name="phone" xsdType="xs:string"/>
                        <element column="5" name="city" xsdType="xs:string"/>
                     </result>
                  </query>
                  <operation name="basic_array_type_op">
                     <call-query href="testArrayTypes">
                        <with-param name="country" query-param="country"/>
                        <with-param name="state" query-param="state"/>
                        <with-param name="creditLimit" query-param="creditLimit"/>
                        <with-param name="city" query-param="city"/>
                        <with-param name="contactFirstName" query-param="contactFirstName"/>
                     </call-query>
                  </operation>
               </data>